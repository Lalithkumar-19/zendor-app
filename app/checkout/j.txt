 const handleRazorpayPayment = () => {
    // Validate address fields
    const requiredFields = [
      "firstName",
      "lastName",
      "email",
      "phone",
      "State",
      "City",
      "PinCode",
      "Street",
    ];

    const selectedAddress = addresses[selectedAddressIndex];

    for (const field of requiredFields) {
      if (!selectedAddress[field] || selectedAddress[field].trim() === "") {
        toast.error(`Please fill the ${field} field in shipping address`);
        return;
      }
    }

    // Validate email format
    if (
      !/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(
        selectedAddress.email
      )
    ) {
      toast.error("Please enter a valid email address");
      return;
    }

    // Validate phone number
    if (!/^[0-9]{10}$/.test(selectedAddress.phone)) {
      toast.error("Please enter a valid 10-digit phone number");
      return;
    }

    // Validate PIN code
    if (!/^[1-9][0-9]{5}$/.test(selectedAddress.PinCode)) {
      toast.error("Please enter a valid 6-digit PIN code");
      return;
    }

    const options = {
      //key: "rzp_live_UPGjFs1QXCHtCV",
      key: "rzp_test_qtfHIjOyxlQnr5",
      amount: Math.ceil(totalPrice + tax) * 100,
      currency: "INR",
      name: "Zendor",
      description: "Order Payment",
      image: "https://i.ibb.co/WvMk7BFM/image.png",
      handler: async function (response) {
        try {
          // Verify payment first
          const verificationResponse = await axiosInstance.post(
            "/payments/verify-payment",
            {
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
            }
          );

          if (verificationResponse.status === 200) {
            // Prepare complete order data
            const orderData = {
              shippingAddress: {
                firstName: selectedAddress.firstName,
                lastName: selectedAddress.lastName,
                companyName: selectedAddress.companyName || "",
                email: selectedAddress.email,
                phone: selectedAddress.phone,
                Street: selectedAddress.Street,
                Landmark: selectedAddress.Landmark || "",
                City: selectedAddress.City,
                State: selectedAddress.State,
                PinCode: selectedAddress.PinCode,
                country: selectedAddress.country || "India",
                isHome: selectedAddress.isHome !== false,
              },
              paymentMode: "Prepaid",
              razorpayPaymentId: response.razorpay_payment_id,
              razorpayOrderId: response.razorpay_order_id,
              razorpaySignature: response.razorpay_signature,
              itemsPrice: totalPrice,
              taxPrice: tax,
              shippingPrice: 0, // Or calculate if needed
              totalPrice: Math.ceil(totalPrice + tax),
              items: cartItems.map((item) => ({
                productId: item.productId,
                productType: item.productType,
                productName: item.name,
                productThumbnail: item.thumbnail,
                isSample: item.isSample,
                quantity: item.quantity,
                size: item.size,
                floorArea: item.floorArea,
                pricePerUnit: item.price,
                totalPrice: item.totalPrice,
              })),
            };

            // Create order with all required data
            const orderRes = await axiosInstance.post(
              "/orders/create-order",
              orderData
            );

            if (orderRes.data.success) {
              toast.success("Order placed successfully");
              // Clear cart or perform other success actions
              router.push(`/orders/${orderRes.data.data.orderId}?success=true`);
            } else {
              toast.error(orderRes.data.message || "Order creation failed");
            }
          } else {
            toast.error(
              verificationResponse.data.message || "Payment verification failed"
            );
          }
        } catch (error) {
          console.error("Payment processing error:", error);
          toast.error(
            error.response?.data?.message ||
              "Error processing your order. Please contact support."
          );
        }
      },
      prefill: {
        name: `${selectedAddress.firstName} ${selectedAddress.lastName}`,
        email: selectedAddress.email,
        contact: selectedAddress.phone,
      },
      notes: {
        address: `${selectedAddress.Street}, ${selectedAddress.City}`,
      },
      theme: {
        color: "#003f62",
      },
      modal: {
        ondismiss: function () {
          document.body.style.overflow = "scroll";
        },
      },
    };

    if (window.Razorpay) {
      const rzp = new window.Razorpay(options);
      rzp.open();
    } else {
      toast.error("Razorpay SDK failed to load. Please try again.");
    }
  };